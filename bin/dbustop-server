#!/usr/bin/python

import sys, os, signal
from optparse import OptionParser

sys.path.insert(0, '.')
from dbustop.server.dbus_monitor_monitor import DbusMonitorMonitor
from dbustop.server.dbustop_server import DbustopServer

def main():
    global dbusmonitor
    options, args = handle_args()
    signal.signal(signal.SIGINT, sigint_handler)
    fd_r, fd_w = os.pipe()

    if os.fork() == 0:
        # Child process: exec dbus-monitor and pipe output to parent
        os.dup2(fd_w, sys.stdout.fileno())
        child_name = '/usr/bin/dbus-monitor'
        os.execl(child_name, child_name, '--session')
    else:
        # Parent process: Read from the dbus-monitor pipe and parse dbus messages.
        dbusmonitor = DbusMonitorMonitor(fd_r)
        db_server = DbustopServer(options.port)
        dbusmonitor.set_server(db_server)
        dbusmonitor.run()

def handle_args():
    parser = OptionParser()
    parser.set_defaults(port=5006)
    parser.add_option('-p', '--port',
            action='store', type='int', dest='port',
            help='The port for dbustop to listen on.')
    return parser.parse_args()

def sigint_handler(signum, frame):
    global dbusmonitor
    dbusmonitor.stop()

if __name__ == "__main__":
    status = 0
    try:
        main()
    except Exception as e:
        import traceback
        traceback.print_exc()
        status = 1
    print 'exit status: %d' % status
    sys.exit(status)
