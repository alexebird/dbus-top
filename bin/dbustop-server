#!/usr/bin/env python

import sys
import os
import signal
import select
import struct
from optparse import OptionParser

sys.path.insert(0, '.')

import dbustop

def main():
    global sig_fd_r
    options, args = handle_args()
    init_signal_handling()

    sesh_monitor = dbustop.DbusMonitorMonitor('session_bus', '--session', '--profile')
    sys_monitor = dbustop.DbusMonitorMonitor('system_bus', '--system', '--profile')
    server = dbustop.DbustopServer(options.host, options.port)

    def start_dbus_monitors(event):
        sesh_monitor.start()
        sys_monitor.start()

    def start_server(event):
        if server.bind_and_listen():
            server.start()
        else:
            dbustop.mainloop.add_event('main()', 'shutdown', 'DbusServer listen failed.')

    dbustop.mainloop.register_child_thread(sesh_monitor)
    dbustop.mainloop.register_child_thread(sys_monitor)
    dbustop.mainloop.register_event_callback('event-loop-ready', start_dbus_monitors)
    dbustop.mainloop.register_child_thread(server)
    dbustop.mainloop.register_event_callback('event-loop-ready', start_server)
    dbustop.mainloop.start()
    run_signal_handler_loop()
    dbustop.mainloop.join()
    return dbustop.mainloop.return_value

def sigint_handler(signum, frame):
    global sig_fd_w
    os.write(sig_fd_w, struct.pack('i', signum))

def init_signal_handling():
    global sig_fd_w, sig_fd_r
    sig_fd_r, sig_fd_w = os.pipe()
    signal.signal(signal.SIGINT, sigint_handler)

def run_signal_handler_loop():
    ready_fds = None
    while True:
        try:
            ready_fds = select.select([sig_fd_r, dbustop.mainloop.child_thread_control_socket], [], [])
        except select.error as e:
            if e[0] == 4:  # errno 4 is 'Interrupted system call'
                continue   # Occurs when a signal comes in while select() is blocking
        if dbustop.mainloop.child_thread_control_socket in ready_fds[0]:
            print 'exiting SignalHandler_thread'
            break
        if sig_fd_r in ready_fds[0]:
            signum = struct.unpack('i', os.read(sig_fd_r, 4))[0]
            dbustop.mainloop.add_event('SignalHandler_thread', 'shutdown', signum)

def handle_args():
    parser = OptionParser()
    parser.set_defaults(host='localhost', port=8080)
    parser.add_option('-s', '--host',
            action='store', type='string', dest='host',
            help='The interface for dbustop to listen on.')
    parser.add_option('-p', '--port',
            action='store', type='int', dest='port',
            help='The port for dbustop to listen on.')
    return parser.parse_args()

if __name__ == "__main__":
    status = 0
    try:
        status = main()
    except Exception as e:
        import traceback
        traceback.print_exc()
        status = 1
    print 'exit status: %d' % status
    sys.exit(status)
