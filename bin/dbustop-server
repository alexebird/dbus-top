#!/usr/bin/env python

import sys
import os
import signal
import select
import struct
from optparse import OptionParser

sys.path.insert(0, '.')
from dbustop.server.dbus_monitor_monitor import DbusMonitorMonitor
from dbustop.server.dbustop_server import DbustopServer
from dbustop.common.event import event_loop
from dbustop.common.event.event import Event

def main():
    global sig_fd_r
    init_signal_handling()
    options, args = handle_args()
    event_loop.loop.start()
    monitor = DbusMonitorMonitor()
    server = DbustopServer(options.port)
    if server.listen():
        server.start()
        monitor.start()
        run_main_loop()
    else:
        event_loop.loop.add_event(Event('abnormal-shutdown', 'shutdown', 'DbusServer listen failed.'))
        event_loop.loop.join()
        return 1
    return 0

def init_signal_handling():
    global sig_fd_w, sig_fd_r
    sig_fd_r, sig_fd_w = os.pipe()
    signal.signal(signal.SIGINT, sigint_handler)

def sigint_handler(signum, frame):
    global sig_fd_w
    os.write(sig_fd_w, struct.pack('i', signum))

def handle_args():
    parser = OptionParser()
    parser.set_defaults(port=5006)
    parser.add_option('-p', '--port',
            action='store', type='int', dest='port',
            help='The port for dbustop to listen on.')
    return parser.parse_args()

def run_main_loop():
    ready_fds = None
    while True:
        try:
            ready_fds = select.select([sig_fd_r, event_loop.loop.child_thread_control_socket], [], [])
        except select.error as e:
            if e[0] == 4:  # errno 4 is 'Interrupted system call'
                continue   # Occurs when a signal comes in while select() is blocking
        if event_loop.loop.child_thread_control_socket in ready_fds[0]:
            print 'exiting signal handler thread'
            break
        if sig_fd_r in ready_fds[0]:
            signum = struct.unpack('i', os.read(sig_fd_r, 4))[0]
            event_loop.loop.add_event(Event('signal_handler', 'shutdown', signum))

if __name__ == "__main__":
    status = 0
    try:
        status = main()
    except Exception as e:
        import traceback
        traceback.print_exc()
        status = 1
    print 'exit status: %d' % status
    sys.exit(status)
