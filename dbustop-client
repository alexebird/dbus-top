#!/usr/bin/python

import sys, os
import signal
import struct
import select
from optparse import OptionParser
from client.dbus_client_controller import DbusClientController
from client.client_connection import ClientConnection
from common import dbus_message

def main():
    global sig_w
    sig_r, sig_w = os.pipe()
    # Give make the write end global so signal handlers can write to it.
    #global controller
    options, args = handle_args()
    signal.signal(signal.SIGINT, sigint_handler)

    #controller = DbusClientController()
    client_conn = ClientConnection(options.host, options.port)
    read_fds = [client_conn.socket, sig_r]
    write_fds = []
    exc_fds = []

    # Register callbacks for network and UI events.
    #net_thread.add_message_received_callback(controller.dbus_message_received)
    #ui_thread.add_key_pressed_callback(controller.key_pressed)
    
    # Event loop
    while True:
        try:
            ready_fds = select.select(read_fds, write_fds, exc_fds)
        except select.error as e:
            if e[0] == 4:  # 'Interrpted system call' error
                continue
            else:
                raise e
        if client_conn.socket in ready_fds[0]:
            msg = dbus_message.depacketize(client_conn.socket)
            if msg:
                print msg.to_string()
        if sig_r in ready_fds[0]:
            signum = struct.unpack('b', os.read(sig_r, 1))[0]
            print signum

def sigint_handler(signum, frame):
    global sig_w
    os.write(sig_w, struct.pack('b', signum))

def handle_args():
    parser = OptionParser()
    parser.set_defaults(host='localhost', port=5006)
    parser.add_option('-s', '--host',
            action='store', type='string', dest='host',
            help='The host to connect to.')
    parser.add_option('-p', '--port',
            action='store', type='int', dest='port',
            help='The port to use.')
    return parser.parse_args()

if __name__ == "__main__":
    status = 0
    try:
        main()
    except Exception as e:
        import traceback
        traceback.print_exc()
        status = 1
    print 'exit status: %d' % status
    sys.exit(status)
