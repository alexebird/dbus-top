#!/usr/bin/python

import sys
import os
import signal
import threading
import fcntl
import select
from server import line_handler, dbus_server

server = None
run_main_loop = True

def sigint_handler(signum, frame):
    global run_main_loop
    global server
    server.stop()
    run_main_loop = False

def main(args):
    #try:
    if len(args) != 2:
        print 'Usage...'
        exit(1)
    signal.signal(signal.SIGINT, sigint_handler)
    argport = int(sys.argv[1])
    fd_r, fd_w = os.pipe()
    if os.fork() == 0:
        os.dup2(fd_w, sys.stdout.fileno())
        child_name = '/usr/bin/dbus-monitor'
        os.execl(child_name, child_name, '--session')
    else:
        os.dup2(fd_r, sys.stdin.fileno())
        dbusmon_output = os.fdopen(fd_r)
        lh = line_handler.LineHandler()
        server = dbus_server.DbustopServer(argport)
        server.start()
        while run_main_loop == True:
            try:
                line = dbusmon_output.readline().rstrip()
                msg = lh.handle_line(line)
                if msg:
                    msg.print_msg()
                    server.send_to_clients(msg)
            except IOError as ioe:
                pass
        server.join()
        print 'exiting dbustop'
    #except Exception as e:
        ##print e
        #raise e
        #return 1
    #else:
        #return 0

if __name__ == "__main__":
    status = main(sys.argv)
    print 'exit status: %d' % status
    sys.exit(status)
